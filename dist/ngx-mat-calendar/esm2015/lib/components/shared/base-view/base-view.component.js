import { Component, EventEmitter, Input, Output } from '@angular/core';
import { areIntervalsOverlapping, endOfDay, getHours, getMinutes, intervalToDuration, isSameDay, startOfDay } from 'date-fns';
import { CalendarEvent, CalendarEventGrid } from '../../../models/CalendarEvent';
import { v4 as uuidv4 } from 'uuid';
import { hoursOfDay } from '../../../models/Times';
import { interval, Subscription } from 'rxjs';
import { tap } from 'rxjs/internal/operators/tap';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/formatting.service";
export class BaseViewComponent {
    constructor(formattingService) {
        this.formattingService = formattingService;
        this.eventClick = new EventEmitter();
        this.changeToDayView = new EventEmitter();
        this.subscriptions$ = new Subscription();
        this.markerPosition = 0;
        this.hoursOfDay = hoursOfDay;
        this.pixelsPerHour = 0;
        this.selectedDate = new Date();
        this.events = [];
    }
    ngOnInit() {
        this.subscriptions$.add(this.options$.pipe(tap((options) => {
            this.options = options;
            this.markerPosition = this.calculateMarkerPosition();
            this.pixelsPerHour = this.options.getPixelsPerMinute * 60;
        })).subscribe());
        this.subscriptions$.add(this.selectedDate$.pipe(tap(selectedDate => {
            this.selectedDate = selectedDate;
        })).subscribe());
        this.subscriptions$.add(interval(60000).pipe(tap(() => {
            this.markerPosition = this.calculateMarkerPosition();
        })).subscribe());
    }
    createEventGroups(day) {
        day.events.map((event) => {
            const uuid = uuidv4();
            let eventGroup = [];
            if (event.grid) {
                const eventsNotAllDay = day.events.filter(x => !x.allDay);
                eventGroup = this.getOverlappingEvents(event, eventsNotAllDay, event.grid.eventGroups);
                eventGroup.map((overlapEvent) => {
                    if (overlapEvent.grid) {
                        overlapEvent.grid.eventGroups.push(uuid);
                        overlapEvent.grid.eventsInGroup = eventGroup.length;
                    }
                    if (!day.eventGroups.includes(uuid)) {
                        day.eventGroups.push(uuid);
                    }
                });
            }
        });
        this.setEventSizes(day);
        return day;
    }
    populateEvents(event, day) {
        const populatedEvent = new CalendarEvent(Object.assign(Object.assign({}, event), { grid: this.calculatePixelsOffsetForEvent(event, day) }));
        return populatedEvent;
    }
    getOverlappingEvents(event, events, eventGroups) {
        return events.filter((compareEvent) => {
            const eventsDoOverlap = areIntervalsOverlapping({ start: event.startTime, end: event.endTime }, { start: compareEvent.startTime, end: compareEvent.endTime }, { inclusive: true });
            let isAlreadyInEventGroup = false;
            if (compareEvent.grid) {
                isAlreadyInEventGroup = compareEvent.grid.eventGroups.some((eventGroup) => {
                    return eventGroups.includes(eventGroup);
                });
            }
            return eventsDoOverlap && !isAlreadyInEventGroup;
        });
    }
    setEventSizes(day) {
        day.eventGroups.forEach(eventGroup => {
            const eventGroupEvents = day.events.filter((event) => {
                var _a;
                return (_a = event.grid) === null || _a === void 0 ? void 0 : _a.eventGroups.includes(eventGroup);
            });
            let index = 0;
            eventGroupEvents.forEach((event) => {
                if (event.grid) {
                    event.grid.width = 100 / (eventGroupEvents.length);
                    event.grid.offsetLeft = event.grid.width * index;
                }
                // check if already has a width/offsetLeft to determine if it's in eventgroup A or B
                index++;
            });
        });
    }
    calculatePixelsOffsetForEvent(event, day) {
        let grid = new CalendarEventGrid();
        const startTime = event.startTime;
        const endTime = isSameDay(event.startTime, event.endTime) ?
            event.endTime :
            endOfDay(event.startTime);
        const eventDurationFromStartTime = intervalToDuration({
            start: startTime,
            end: endTime
        });
        const eventDurationFromMidnight = intervalToDuration({
            start: startOfDay(day.date),
            end: event.endTime
        });
        eventDurationFromStartTime.hours = eventDurationFromStartTime.hours || 0;
        eventDurationFromStartTime.minutes = eventDurationFromStartTime.minutes || 0;
        eventDurationFromMidnight.hours = eventDurationFromMidnight.hours || 0;
        eventDurationFromMidnight.minutes = eventDurationFromMidnight.minutes || 0;
        const offsetInMinutes = !isSameDay(event.startTime, event.endTime) && isSameDay(event.endTime, day.date) ?
            0 : Math.abs(getHours(startTime)) * 60 + getMinutes(startTime);
        const durationOffset = !isSameDay(event.startTime, event.endTime) && isSameDay(event.endTime, day.date) ?
            eventDurationFromMidnight.hours * 60 + eventDurationFromMidnight.minutes :
            eventDurationFromStartTime.hours * 60 + eventDurationFromStartTime.minutes;
        grid = Object.assign(Object.assign({}, grid), { offsetTop: offsetInMinutes * this.options.getPixelsPerMinute, durationOffset: durationOffset * this.options.getPixelsPerMinute });
        return grid;
    }
    getCellHeight(time) {
        if (time.isEnd) {
            return 20;
        }
        return this.pixelsPerHour;
    }
    calculateMarkerPosition() {
        const now = new Date();
        const offsetTop = (getHours(now) * 60 + getMinutes(now)) * this.options.getPixelsPerMinute;
        return offsetTop;
    }
    isToday(date) {
        return this.formattingService.isToday(date);
    }
    getDayName(date) {
        return this.formattingService.getDayName(date);
    }
    getDayNumber(date) {
        return this.formattingService.getDayNumber(date);
    }
    getTime(date) {
        return this.formattingService.getTime(date);
    }
    onEventClick(event) {
        this.eventClick.emit(event);
    }
    navigateToDayView(date) {
        this.changeToDayView.emit(date);
    }
    sortByTime(a, b) {
        return a.startTime.getTime() - b.startTime.getTime();
    }
    sortByAllDay(event) {
        return event.allDay ? -1 : 1;
    }
    isSameDay(date, startTime, endTime) {
        return isSameDay(new Date(date), new Date(startTime)) || isSameDay(new Date(date), new Date(endTime));
    }
    ngOnDestroy() {
        this.subscriptions$.unsubscribe();
    }
}
BaseViewComponent.ɵfac = function BaseViewComponent_Factory(t) { return new (t || BaseViewComponent)(i0.ɵɵdirectiveInject(i1.FormattingService)); };
BaseViewComponent.ɵcmp = i0.ɵɵdefineComponent({ type: BaseViewComponent, selectors: [["ng-component"]], inputs: { options$: "options$", selectedDate$: "selectedDate$", events$: "events$" }, outputs: { eventClick: "eventClick", changeToDayView: "changeToDayView" }, decls: 0, vars: 0, template: function BaseViewComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseViewComponent, [{
        type: Component,
        args: [{
                template: ''
            }]
    }], function () { return [{ type: i1.FormattingService }]; }, { options$: [{
            type: Input
        }], selectedDate$: [{
            type: Input
        }], events$: [{
            type: Input
        }], eventClick: [{
            type: Output
        }], changeToDayView: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,